I"0<p>Welcome to part three of this tutorial series, I would recommend going back and reading the <a href="/AnyoneCanCode">previous 2 articles</a> if you haven’t already. This is intended to be more of a standalone tutorial and we might go a little more in depth than usual so don’t worry if the later stuff goes over your head on the first read.</p>

<p>Programmers use a wide variety of data types and data structures all the time, we use the former because we have to (well not technically but if you really want to try and interpret <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters" target="_blank">raw ascii binary</a> be my guest) and we use the latter to solve more complex problems. I have already introduced you to a couple of basic data types already, you may remember the integer (int) or the string (str) being the computers way of distinguishing between a whole number and a word/sentence. Today I intend to introduce you to all the basic data types that Python has to offer so strap in and lets go.</p>

<p><br /></p>
<h3>Data Types</h3>

<p>In Python we can check the data type of a varibale using the <code>type()</code> function, this means that if you put anything inside the brackets of <code>type()</code> Python will tell you what type it is. Try this out in <a href="https://www.pythonanywhere.com/try-ipython/" target="_blank">IPython</a> with the examples below.</p>

<p><br /></p>
<h4>Integer</h4>

<p>An integer (int) is simply a whole number, any whole number. So for example <span style="color: red;">1</span> or <span style="color: red;">2</span> would be an integer whereas <span style="color: red;">1.2</span> would not be. In Python you can make an integer of any length, this means that the number <span style="color: red;">102022848604029375972719106038937576</span> would be accepted by python as an integer and no errors will come your way, this is not necessarily the case for all languages but for us right now that doesn’t matter.</p>

<p><br /></p>
<h4>Float</h4>

<p>A float is short for floating-point number, this is essentially a number with a decimal point in it. The way that computers store this data is really interesting and I would definitely recommend the <a href="https://en.wikipedia.org/wiki/Single-precision_floating-point_format" target="_blank">wiki article</a> if maths is your thing. Try typing <code>type(1.7)</code> into <a href="https://www.pythonanywhere.com/try-ipython/" target="_blank">IPython</a> and see what happens. It should return float, if not check that you actually put a decimal point in the number.</p>

<p>Floats are obviously very useful for working with decimals but they also have standard form support (for the uninitiated standard form is a scientific number notation, it’s a way of writing really big or really small numbers). You can use standard form by using an <code>e</code> in place of: ×10. For example instead of writing <span style="color: red;">1.989×10<sup>30</sup></span> you would write <code>1.989e30</code></p>

<p><br /></p>
<h4>String</h4>

<p>As I keep saying, a string (str) is fancy programmer talk for word/sentence. In fact you aren’t only restricted to those, you can even mix in a few numbers into a string, or even make a string comprised of only numbers. The defining feature of a string is if it surrounded by quotes, be they single: ‘’  or double: “” it doesn’t matter (not the case for all languages but is the case for Python). So <code>"this would be a string"</code> and so would this → <code>"123456"</code> and this → <code>'this is a 1234 string'</code>. This may seem annoying or confusing but it is for good reason. User input is usually collected as a string and as such it’s important to be able to store any type of user inputtable data as a string (be that numbers floats or words), we can then use some simple functions to convert the input to a different data type.</p>

<p><br /></p>
<h4>Character</h4>

<p>A character (chr) is what it says on the tin, a single character. In Python, no distinction is made between a string and a character. That is to say that a character is just a string with a length of 1. The reason for me bringing this up however is due to it being quite common in other languages and as such it’s useful to know.</p>

<p><br /></p>
<h4>Boolean</h4>

<p>A boolean (often shortened to bool) is simply a value that is either <code>True</code> or <code>False</code>. I have covered this operator in depth in <a href="AnyoneCanCode/anyoneCanCodeLogicAndBranches/">this article</a> so have a look if you want a deeper dive into logic. The gist of it is, you can use booleans with conditional statements (an if else statement for example - again <a href="AnyoneCanCode/anyoneCanCodeLogicAndBranches/">go have a look</a> if you need reminding) and they can be combined with logical operators to form more complex logic.</p>
:ET